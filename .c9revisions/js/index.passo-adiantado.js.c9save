{"ts":1361535258842,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1361535474634,"patch":[[{"diffs":[[1,"$(window).load(function(){\n/***\nDojo no DESDR =>  Javascript + jQuery + Jasmine\n\nJasmine: http://pivotal.github.com/jasmine/\njQuery: http://api.jquery.com/\n\nJogo da Memória\n\n - Especificação\n     - jogo da memória com 6 imagens\n     - tabuleiro começa vazio e a ordem das peças deve ser definida. \n     - ao clicar na carta a mesma é virada e exibida ao usuário, e seu sequencial deve ser armazenadao\n     - no clique subsequente, se a imagem da carta for a mesma do elemento anterior, então as duas permanecem exibidas\n     - caso a imagem na segunda carta virada não coincida com a carta anterior, as duas são desviradas\n     - o jogo acaba quando todas as cartas estiverem viradas\n     - o usuário deve ser notificado de que o jogo finalizou\n     - ao encontrar um par, as cartas do par terão um efeito de realcce(highlight) como feedback para o usuário\n     \nRecomendações\n\n    - Prioridade para a parte lógica do jogo. Vamos implementar os requisitos através de Desenvolvimento Orientado a Testes, usando o framework jasmine\n    - Após a implementação da lógica faremos a finalização da interface com o usuário. E vamos seguir a mesma metodologia de Teste em primeiro lugar para essa etapa.\n    - Vamos trabalhar em pares, com piloto e co-piloto. A dupla deve verbalizar o trabalho executado.\n    - A audiência deve observar em silêncio e ajudar apenas quando solicitada pela dupla no comando. \n***/\n\nvar host_images = \"https://raw.github.com/abner/jogocartas/master/\";\n\nvar images = [\n    { id:'boy', filename: 'Character%20Boy.png' },\n    { id: 'bug', filename: 'Enemy%20Bug.png'},\n    { id: 'gem-blue', filename: 'Gem%20Blue.png'},\n    { id: 'gem-green', filename: 'Gem%20Green.png'},\n    { id: 'gem-orange', filename: 'Gem%20Orange.png'},\n    { id: 'rock', filename: 'Rock.png'}\n    ];\n\n\nvar tabuleiro = [];\n\nvar logo_serpro = host_images + \"serpro.png\";\n//for para ilustrar como iterar no array\nfor(index in images) {\n    console.log(images[index].id);\n    console.log(images[index].filename);\n}\n\nfunction obterUrlImagem(imagem) {\n    return host_images + imagem.filename;\n}\n\njQuery(function($) {\n   //iterando utilizando jquery\n    //jQuery.each(images, function(index, value) {\n    //    $('div.conteudo').append(\"<img valing=\"middle\" class='backcover' src='\" + obterUrlImagem(value) + \"' class='carta' />\");\n    //});\n    for(i=0; i <  images.length * 2 ; i++) {\n        $('div.conteudo').append(\"<div class='backcover' id='carta-\" + i +\"' data-sequencial='\"+ i + \"'></div>\");\n    }\n    \n    $('.backcover').click(function(){\n        $(this).append(\"<img src='\" + obterUrlImagem(images[0]) + \"' class='carta' />\");\n        \n        /* jQuery UI Highlight Effect => http://docs.jquery.com/UI/Effects/Highlight*/\n        $(this).effect('highlight', 1400);\n    });\n});\n\n\nwindow.funcao_faz_nada = function() {\n    return 'faz nada'\n};\n\nfunction faz_algo() {\n    return 'faz algo';\n}\n\nfunction somar(num1, num2) {\n    return num1 + num2;\n}\n\njQuery(function($) {\n    $(\"#botao\").add(\"#conteudo\").click(function(){\n        $('#conteudo').toggle('slow');\n    });\n    \n    $('#botao_testes').click(function() {\n        rodarTestes();\n    });\n});\n\nfunction rodarTestes() {\n    describe('somar', function() {\n        it('deve retornar 4 ao somar 1 com 3', function() {\n            expect(somar(1,3)).toBe(4);\n        });\n    });\n    \n    describe('funcao faz nada', function(){\n            it('deve retornar \"faz nada\"', function(){\n              expect(funcao_faz_nada()).toBe(\"faz nada\");\n            });\n          });\n    \n    describe('funcao faz algo', function(){\n            it('deve retornar \"faz algo\"', function(){\n              expect(faz_algo()).toBe(\"faz algo\");\n            });\n          });\n    \n    var jasmineEnv = jasmine.getEnv();\n    jasmineEnv.updateInterval = 1000;\n    jasmineEnv.execute();\n}\n\n//FUNCOES UTILITARIAS\n/**\n * Randomize array element order in-place.\n * Using Fisher-Yates shuffle algorithm.\n */\nfunction shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n}\n\nArray.prototype.shuffle = function() {\n  var i = this.length, j, tempi, tempj;\n  if ( i == 0 ) return false;\n  while ( --i ) {\n     j       = Math.floor( Math.random() * ( i + 1 ) );\n     tempi   = this[i];\n     tempj   = this[j];\n     this[i] = tempj;\n     this[j] = tempi;\n  }\n  return this;\n}\n\n\n/* TESTES */\n\ndescribe('Array de imagens', function() {\n        it('deve conter  6 imagens', function() {\n            expect(images.length).toBe(6);\n        });\n    });\n\ndescribe('Função obterUrlImagem', function() {\n    it('deve retornar url com o endereço da imagem', function(){\n       expect(obterUrlImagem(images[0])).toBe(\"https://raw.github.com/abner/jogocartas/master/Character%20Boy.png\");\n    });\n});\ndescribe(\"Embaralhar array deve retornar um array\", function() {\n    \n    var array = [1,2,3,4,5,6,7,8,9,10];\n    var array_embaralhado = array.shuffle();\n    \n    it(\"com os elementos numa ordem diferente da ordem do array fornecido\", function() {\n        expect(array_embaralhado.join()).not.toBe(\"1,2,3,4,5,6,7,8,9,10\");\n    });\n    it(\"com o mesmo tamanho\", function() {\n        expect(array.length).toBe(array_embaralhado.length);\n    });\n    it(\"com os mesmos elementos\", function() {\n        \n        expect(array_embaralhado).toContain(1);\n        expect(array_embaralhado).toContain(2);\n        expect(array_embaralhado).toContain(3);\n        expect(array_embaralhado).toContain(4)\n        expect(array_embaralhado).toContain(5);\n        expect(array_embaralhado).toContain(6);\n        expect(array_embaralhado).toContain(7);\n        expect(array_embaralhado).toContain(8);\n        expect(array_embaralhado).toContain(9);\n        expect(array_embaralhado).toContain(10);\n    });\n});\n\n\n\n});"]],"start1":0,"start2":0,"length1":0,"length2":5883}]],"length":5883,"saved":false}
{"ts":1361535516682,"patch":[[{"diffs":[[0," = \""],[-1,"https://raw.github.com/abner/jogocartas/master"],[1,"../images"],[0,"/\";\n"]],"start1":1421,"start2":1421,"length1":54,"length2":17}]],"length":5846,"saved":false}
{"ts":1361535544205,"patch":[[{"diffs":[[0,"ges = \"."],[-1,"."],[0,"/images/"]],"start1":1418,"start2":1418,"length1":17,"length2":16}]],"length":5845,"saved":false}
{"ts":1361535604020,"patch":[[{"diffs":[[-1,"$"],[1,"jQuery"],[0,"(window)"]],"start1":0,"start2":0,"length1":9,"length2":14}]],"length":5850,"saved":false}
{"ts":1361535643819,"patch":[[{"diffs":[[0,"Be(\""],[-1,"https://raw.github.com/abner/jogocartas/master"],[1,"./images"],[0,"/Cha"]],"start1":4766,"start2":4766,"length1":54,"length2":16}]],"length":5812,"saved":false}
