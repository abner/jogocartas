{"ts":1361536722348,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"jQuery(window).load(function(){\n/***\nDojo no DESDR =>  Javascript + jQuery + Jasmine\n\nJasmine: http://pivotal.github.com/jasmine/\njQuery: http://api.jquery.com/\n\nJogo da Memória\n\n - Especificação\n     - jogo da memória com 6 imagens\n     - tabuleiro começa vazio e a ordem das peças deve ser definida. \n     - ao clicar na carta a mesma é virada e exibida ao usuário, e seu sequencial deve ser armazenadao\n     - no clique subsequente, se a imagem da carta for a mesma do elemento anterior, então as duas permanecem exibidas\n     - caso a imagem na segunda carta virada não coincida com a carta anterior, as duas são desviradas\n     - o jogo acaba quando todas as cartas estiverem viradas\n     - o usuário deve ser notificado de que o jogo finalizou\n     - ao encontrar um par, as cartas do par terão um efeito de realcce(highlight) como feedback para o usuário\n     \nRecomendações\n\n    - Prioridade para a parte lógica do jogo. Vamos implementar os requisitos através de Desenvolvimento Orientado a Testes, usando o framework jasmine\n    - Após a implementação da lógica faremos a finalização da interface com o usuário. E vamos seguir a mesma metodologia de Teste em primeiro lugar para essa etapa.\n    - Vamos trabalhar em pares, com piloto e co-piloto. A dupla deve verbalizar o trabalho executado.\n    - A audiência deve observar em silêncio e ajudar apenas quando solicitada pela dupla no comando. \n***/\n\nvar host_images = \"./images/\";\n\nvar images = [\n    { id:'boy', filename: 'Character%20Boy.png' },\n    { id: 'bug', filename: 'Enemy%20Bug.png'},\n    { id: 'gem-blue', filename: 'Gem%20Blue.png'},\n    { id: 'gem-green', filename: 'Gem%20Green.png'},\n    { id: 'gem-orange', filename: 'Gem%20Orange.png'},\n    { id: 'rock', filename: 'Rock.png'}\n    ];\n\n\nvar tabuleiro = [];\n\n//for para ilustrar como iterar no array\nfor(index in images) {\n    console.log(images[index].id);\n    console.log(images[index].filename);\n}\n\nfunction obterUrlImagem(imagem) {\n    return host_images + imagem.filename;\n}\n\njQuery(function($) {\n  //colocar aqui o código relacionado com a interface visual e iteração com o usuário\n});\n\n//FUNCOES UTILITARIAS\n/**\n * Randomize array element order in-place.\n * Using Fisher-Yates shuffle algorithm.\n */\nfunction shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n}\n\nArray.prototype.shuffle = function() {\n  var i = this.length, j, tempi, tempj;\n  if ( i == 0 ) return false;\n  while ( --i ) {\n     j       = Math.floor( Math.random() * ( i + 1 ) );\n     tempi   = this[i];\n     tempj   = this[j];\n     this[i] = tempj;\n     this[j] = tempi;\n  }\n  return this;\n}\n\n\n/* TESTES */\n\ndescribe('Array de imagens', function() {\n        it('deve conter  6 imagens', function() {\n            expect(images.length).toBe(6);\n        });\n    });\n\ndescribe('Função obterUrlImagem', function() {\n    it('deve retornar url com o endereço da imagem', function(){\n       expect(obterUrlImagem(images[0])).toBe(\"./images/Character%20Boy.png\");\n    });\n});\ndescribe(\"Embaralhar array deve retornar um array\", function() {\n    \n    var array = [1,2,3,4,5,6,7,8,9,10];\n    var array_embaralhado = array.shuffle();\n    \n    it(\"com os elementos numa ordem diferente da ordem do array fornecido\", function() {\n        expect(array_embaralhado.join()).not.toBe(\"1,2,3,4,5,6,7,8,9,10\");\n    });\n    it(\"com o mesmo tamanho\", function() {\n        expect(array.length).toBe(array_embaralhado.length);\n    });\n    it(\"com os mesmos elementos\", function() {\n        \n        expect(array_embaralhado).toContain(1);\n        expect(array_embaralhado).toContain(2);\n        expect(array_embaralhado).toContain(3);\n        expect(array_embaralhado).toContain(4)\n        expect(array_embaralhado).toContain(5);\n        expect(array_embaralhado).toContain(6);\n        expect(array_embaralhado).toContain(7);\n        expect(array_embaralhado).toContain(8);\n        expect(array_embaralhado).toContain(9);\n        expect(array_embaralhado).toContain(10);\n    });\n});\n\n\n\n});"]],"start1":0,"start2":0,"length1":0,"length2":4145}]],"length":4145}
{"contributors":[],"silentsave":false,"ts":1361550775490,"patch":[[{"diffs":[[0,"his;\n}\n\n"],[1,"function montarDeck() {\n    var deck = [];\n    \n    for(i = 0; i < 6; i++) {\n        deck.push({indice_imagem: i, virado: false});\n        deck.push({indice_imagem: i, virado: false});\n    }\n    \n    return deck;\n}\n\nfunction virarCarta(deck, indexCarta) {\n    if (indexCarta==selecionada){\n        return;\n    }\n  deck[indexCarta].virado = true; \n    if(selecionada == -1) {\n        selecionada = indexCarta;\n    } else {\n        var acertada = (deck[indexCarta].index_imagem == deck[selecionada].index_imagem);\n        deck[indexCarta].acertada = acertada;\n        deck[selecionada].acertada = acertada;\n        \n        selecionada = -1;\n    }\n}\n\ndeck = montarDeck().shuffle();\n\n"],[0,"\n/* TEST"]],"start1":2765,"start2":2765,"length1":16,"length2":697}]],"length":4826,"saved":false}
{"ts":1361550783280,"patch":[[{"diffs":[[0,";\n\n\n"],[-1,"/* TESTES */\n\ndescribe('Array de imagens', function() {\n        it('deve conter  6 imagens', function() {\n            expect(images.length).toBe(6);\n        });\n    });\n\ndescribe('Função obterUrlImagem', function() {\n    it('deve retornar url com o endereço da imagem', function(){\n       expect(obterUrlImagem(images[0])).toBe(\"./images/Character%20Boy.png\");\n    });\n});\ndescribe(\"Embaralhar array deve retornar um array\", function() {\n    \n    var array = [1,2,3,4,5,6,7,8,9,10];\n    var array_embaralhado = array.shuffle();\n    \n    it(\"com os elementos numa ordem diferente da ordem do array fornecido\", function() {\n        expect(array_embaralhado.join()).not.toBe(\"1,2,3,4,5,6,7,8,9,10\");\n    });\n    it(\"com o mesmo tamanho\", function() {\n        expect(array.length).toBe(array_embaralhado.length);\n    });\n    it(\"com os mesmos elementos\", function() {\n        \n        expect(array_embaralhado).toContain(1);\n        expect(array_embaralhado).toContain(2);\n        expect(array_embaralhado).toContain(3);\n        expect(array_embaralhado).toContain(4)\n        expect(array_embaralhado).toContain(5);\n        expect(array_embaralhado).toContain(6);\n        expect(array_embaralhado).toContain(7);\n        expect(array_embaralhado).toContain(8);\n        expect(array_embaralhado).toContain(9);\n        expect(array_embaralhado).toContain(10);\n    });\n});\n\n\n\n"],[0,"});"]],"start1":3451,"start2":3451,"length1":1375,"length2":7}]],"length":3458,"saved":false}
{"ts":1361550792687,"patch":[[{"diffs":[[-1,"jQuery(window).load(function(){\n"],[0,"/***"]],"start1":0,"start2":0,"length1":36,"length2":4},{"diffs":[[0,"fle();\n\n"],[-1,"\n});"]],"start1":3414,"start2":3414,"length1":12,"length2":8}]],"length":3422,"saved":false}
{"ts":1361550912956,"patch":[[{"diffs":[[1,"jQuery(window).load(function(){\n"],[0,"/***\nDoj"]],"start1":0,"start2":0,"length1":8,"length2":40},{"diffs":[[0,"shuffle();\n\n"],[1,"});"]],"start1":3442,"start2":3442,"length1":12,"length2":15}]],"length":3457,"saved":false}
{"ts":1361550937067,"patch":[[{"diffs":[[-1,"jQuery(window).load(function(){\n"],[0,"/***"]],"start1":0,"start2":0,"length1":36,"length2":4},{"diffs":[[0,"ffle();\n"],[-1,"\n});"]],"start1":3413,"start2":3413,"length1":12,"length2":8}]],"length":3421,"saved":false}
